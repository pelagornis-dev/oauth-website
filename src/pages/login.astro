---
import Layout from '../layouts/Layout.astro';
import CardContainer from '@components/CardContainer.astro';
import AuthTitle from '@components/AuthTitle.astro';
import AuthInput from '@components/AuthInput.astro';
import AuthButton from '@components/AuthButton.astro';
import AuthError from '@components/AuthError.astro';
import AuthLinks from '@components/AuthLinks.astro';
import SocialLoginButton from '@components/SocialLoginButton.astro';
---

<Layout>
  <CardContainer>
    <AuthTitle title="Sign in" description="Pelagornis OAuth에 로그인하세요" />
    <form id="login-form" class="space-y-5" autocomplete="off">
      <div id="login-email-step">
        <AuthInput
          type="email"
          id="login-email"
          placeholder="이메일"
          autoComplete="username"
          className=""
        />
      </div>
      <div id="login-password-step" class="hidden">
        <AuthInput
          type="password"
          id="login-password"
          placeholder="비밀번호"
          autoComplete="current-password"
          className=""
        />
        <button
          type="button"
          id="login-back-btn"
          class="w-full py-2 rounded-xl border border-gray-200 bg-white text-black font-semibold hover:bg-gray-50 transition mt-2"
          >이전으로</button
        >
      </div>
      <AuthButton id="login-btn" type="submit" text="계속하기" />
      <AuthError id="login-error" />
    </form>
    <AuthLinks
      links={[
        { label: '계정 만들기', href: '/register', class: 'text-black hover:underline' },
        { label: '비밀번호 찾기', href: '/reset-password', class: 'text-gray-500 hover:underline' },
      ]}
    />
    <div class="my-8 flex items-center">
      <div class="flex-grow h-px bg-gray-200"></div>
      <span class="mx-3 text-gray-400 text-xs">또는</span>
      <div class="flex-grow h-px bg-gray-200"></div>
    </div>
    <SocialLoginButton
      provider="google"
      href="http://localhost:3000/api/v1/auth/google"
      text="Google로 계속하기"
    />
  </CardContainer>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('login-form');
      const emailStep = document.getElementById('login-email-step');
      const passwordStep = document.getElementById('login-password-step');
      const emailInput = document.getElementById('login-email');
      const passwordInput = document.getElementById('login-password');
      const btn = document.getElementById('login-btn');
      const errorDiv = document.getElementById('login-error');
      const backBtn = document.getElementById('login-back-btn');
      let step = 1;
      let email = '';

      function showError(msg) {
        if (errorDiv) {
          errorDiv.textContent = msg;
          errorDiv.classList.remove('hidden');
        }
      }
      function clearError() {
        if (errorDiv) errorDiv.classList.add('hidden');
      }

      function setButtonText(text) {
        if (btn) btn.textContent = text;
      }

      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        clearError();
        if (step === 1) {
          if (!emailInput || !passwordStep || !btn) return;
          const emailVal = emailInput instanceof HTMLInputElement ? emailInput.value.trim() : '';
          email = emailVal;
          if (email && email.includes('@')) {
            emailStep?.classList.add('hidden');
            passwordStep.classList.remove('hidden');
            setButtonText('로그인');
            if (passwordInput instanceof HTMLInputElement) passwordInput.focus();
            step = 2;
          } else {
            showError('올바른 이메일을 입력하세요.');
            emailInput.classList.add('border-red-500');
          }
        } else if (step === 2) {
          if (!passwordInput || !btn) return;
          const passwordVal = passwordInput instanceof HTMLInputElement ? passwordInput.value : '';
          if (passwordVal) {
            btn instanceof HTMLButtonElement && (btn.disabled = true);
            setButtonText('로그인 중...');
            try {
              const response = await fetch('http://localhost:3000/api/v1/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password: passwordVal }),
              });
              const data = await response.json();
              if (data.success) {
                const accessToken = data.data.tokens.accessToken;
                const refreshToken = data.data.tokens.refreshToken || '';
                let redirect = new URLSearchParams(window.location.search).get('redirect') || '';
                let callbackUrl = `/auth/callback?token=${encodeURIComponent(accessToken)}&refresh=${encodeURIComponent(refreshToken)}`;
                if (redirect && redirect.startsWith('/')) {
                  callbackUrl += `&redirect=${encodeURIComponent(redirect)}`;
                }
                window.location.href = callbackUrl;
              } else {
                showError(data.error?.message || '로그인 실패');
                passwordInput.classList.add('border-red-500');
                setButtonText('로그인');
                btn instanceof HTMLButtonElement && (btn.disabled = false);
              }
            } catch {
              showError('Network error');
              setButtonText('로그인');
              btn instanceof HTMLButtonElement && (btn.disabled = false);
            }
          } else {
            showError('비밀번호를 입력하세요.');
            passwordInput.classList.add('border-red-500');
          }
        }
      });

      backBtn?.addEventListener('click', () => {
        if (!emailStep || !passwordStep || !btn) return;
        passwordStep.classList.add('hidden');
        emailStep.classList.remove('hidden');
        setButtonText('계속하기');
        step = 1;
        if (emailInput instanceof HTMLInputElement) emailInput.focus();
      });

      emailInput?.addEventListener('input', () => {
        emailInput.classList.remove('border-red-500');
        clearError();
      });
      passwordInput?.addEventListener('input', () => {
        passwordInput.classList.remove('border-red-500');
        clearError();
      });
    });
  </script>
</Layout>
