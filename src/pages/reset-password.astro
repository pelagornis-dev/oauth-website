---
import Layout from '../layouts/Layout.astro';
import CardContainer from '@components/CardContainer.astro';
import AuthTitle from '@components/AuthTitle.astro';
import AuthInput from '@components/AuthInput.astro';
import AuthButton from '@components/AuthButton.astro';
import AuthError from '@components/AuthError.astro';
import AuthSuccess from '@components/AuthSuccess.astro';
import AuthLinks from '@components/AuthLinks.astro';
---

<Layout>
  <CardContainer>
    <AuthTitle
      title="Reset Password"
      description="가입하신 이메일로 비밀번호 재설정 링크를 보내드립니다."
    />
    <form
      id="reset-form"
      class="space-y-5"
      autocomplete="off"
      method="POST"
      action="http://localhost:3000/api/v1/auth/reset-password?locale=ko"
    >
      <AuthInput
        type="password"
        name="oldPassword"
        id="reset-old-password"
        placeholder="기존 비밀번호"
        autoComplete="current-password"
      />
      <AuthInput
        type="password"
        name="newPassword"
        id="reset-new-password"
        placeholder="새 비밀번호"
        autoComplete="new-password"
      />
      <AuthInput
        type="password"
        name="confirmPassword"
        id="reset-confirm-password"
        placeholder="새 비밀번호 확인"
        autoComplete="new-password"
      />
      <AuthError id="reset-error" />
      <AuthButton id="reset-btn" type="submit" text="비밀번호 재설정" />
      <AuthSuccess id="reset-success" />
    </form>
    <AuthLinks
      links={[
        { label: '로그인', href: '/login', class: 'text-black hover:underline' },
        { label: '회원가입', href: '/register', class: 'text-gray-500 hover:underline' },
      ]}
    />
  </CardContainer>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('reset-form') as HTMLFormElement | null;
      const oldPwInput = document.getElementById('reset-old-password') as HTMLInputElement | null;
      const newPwInput = document.getElementById('reset-new-password') as HTMLInputElement | null;
      const confirmInput = document.getElementById(
        'reset-confirm-password',
      ) as HTMLInputElement | null;
      const btn = document.getElementById('reset-btn') as HTMLButtonElement | null;
      const errorDiv = document.getElementById('reset-error');
      const successDiv = document.getElementById('reset-success');

      // 쿼리에서 token 추출
      function getToken() {
        const params = new URLSearchParams(window.location.search);
        return params.get('token') || '';
      }

      function showError(msg) {
        if (errorDiv) {
          errorDiv.textContent = msg;
          errorDiv.classList.remove('hidden');
        }
      }
      function showSuccess(msg) {
        if (successDiv) {
          successDiv.textContent = msg;
          successDiv.classList.remove('hidden');
        }
      }
      function clearMsg() {
        if (errorDiv) errorDiv.classList.add('hidden');
        if (successDiv) successDiv.classList.add('hidden');
      }

      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        clearMsg();
        if (!oldPwInput || !newPwInput || !confirmInput || !btn || !form) return;
        const oldPw = oldPwInput.value;
        const newPw = newPwInput.value;
        const confirmPw = confirmInput.value;
        const token = getToken();
        if (!oldPw || !newPw || !confirmPw) {
          showError('모든 항목을 입력하세요.');
          return;
        }
        if (newPw !== confirmPw) {
          showError('새 비밀번호가 일치하지 않습니다.');
          confirmInput.classList.add('border-red-500');
          return;
        }
        if (!token) {
          showError('유효하지 않은 접근입니다.');
          return;
        }
        btn.disabled = true;
        btn.textContent = '재설정 중...';
        try {
          const response = await fetch(form.action, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              oldPassword: oldPw,
              newPassword: newPw,
              token: token,
            }),
          });
          const data = await response.json();
          if (data.success) {
            showSuccess('비밀번호가 성공적으로 변경되었습니다.');
            btn.textContent = '비밀번호 재설정';
            btn.disabled = false;
          } else {
            showError(data.error?.message || '재설정 실패');
            btn.textContent = '비밀번호 재설정';
            btn.disabled = false;
          }
        } catch {
          showError('Network error');
          btn.textContent = '비밀번호 재설정';
          btn.disabled = false;
        }
      });

      [oldPwInput, newPwInput, confirmInput].forEach((el) => {
        el?.addEventListener('input', () => {
          el.classList.remove('border-red-500');
          clearMsg();
        });
      });
    });
  </script>
</Layout>
