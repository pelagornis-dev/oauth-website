---
import Layout from '../layouts/Layout.astro';
import CardContainer from '@components/CardContainer.astro';
import AuthTitle from '@components/AuthTitle.astro';
import AuthInput from '@components/AuthInput.astro';
import AuthButton from '@components/AuthButton.astro';
import AuthError from '@components/AuthError.astro';
import AuthLinks from '@components/AuthLinks.astro';
import SocialLoginButton from '@components/SocialLoginButton.astro';
---

<Layout>
  <CardContainer>
    <AuthTitle title="Sign up" description="Pelagornis OAuth에 가입하세요" />
    <form id="register-form" class="space-y-5" autocomplete="off">
      <div id="register-email-step">
        <AuthInput type="email" id="register-email" placeholder="이메일" autoComplete="username" />
      </div>
      <div id="register-info-step" class="hidden space-y-4">
        <AuthInput
          type="text"
          id="register-firstname"
          placeholder="이름"
          autoComplete="given-name"
        />
        <AuthInput type="text" id="register-lastname" placeholder="성" autoComplete="family-name" />
        <AuthInput
          type="password"
          id="register-password"
          placeholder="비밀번호"
          autoComplete="new-password"
        />
      </div>
      <AuthButton id="register-btn" type="submit" text="계속하기" />
      <AuthError id="register-error" />
    </form>
    <AuthLinks
      links={[
        { label: '이미 계정이 있으신가요?', href: '/login', class: 'text-black hover:underline' },
      ]}
    />
    <div class="my-8 flex items-center">
      <div class="flex-grow h-px bg-gray-200"></div>
      <span class="mx-3 text-gray-400 text-xs">또는</span>
      <div class="flex-grow h-px bg-gray-200"></div>
    </div>
    <SocialLoginButton
      provider="google"
      href="http://localhost:3000/api/v1/auth/google"
      text="Google로 계속하기"
    />
  </CardContainer>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('register-form');
      const emailStep = document.getElementById('register-email-step');
      const infoStep = document.getElementById('register-info-step');
      const emailInput = document.getElementById('register-email');
      const firstName = document.getElementById('register-firstname');
      const lastName = document.getElementById('register-lastname');
      const password = document.getElementById('register-password');
      const btn = document.getElementById('register-btn');
      const errorDiv = document.getElementById('register-error');
      let step = 1;
      let email = '';

      function showError(msg) {
        if (errorDiv) {
          errorDiv.textContent = msg;
          errorDiv.classList.remove('hidden');
        }
      }
      function clearError() {
        if (errorDiv) errorDiv.classList.add('hidden');
      }

      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        clearError();
        if (step === 1) {
          if (!emailInput || !infoStep || !btn) return;
          const emailVal = emailInput instanceof HTMLInputElement ? emailInput.value.trim() : '';
          email = emailVal;
          if (email && email.includes('@')) {
            emailStep?.classList.add('hidden');
            infoStep.classList.remove('hidden');
            btn.textContent = '가입하기';
            if (firstName instanceof HTMLInputElement) firstName.focus();
            step = 2;
          } else {
            showError('올바른 이메일을 입력하세요.');
            emailInput.classList.add('border-red-500');
          }
        } else if (step === 2) {
          if (!firstName || !lastName || !password || !btn) return;
          const f = firstName instanceof HTMLInputElement ? firstName.value.trim() : '';
          const l = lastName instanceof HTMLInputElement ? lastName.value.trim() : '';
          const p = password instanceof HTMLInputElement ? password.value : '';
          if (f && l && p) {
            btn instanceof HTMLButtonElement && (btn.disabled = true);
            btn.textContent = '가입 중...';
            try {
              const response = await fetch('http://localhost:3000/api/v1/auth/register', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, firstName: f, lastName: l, password: p }),
              });
              const data = await response.json();
              if (data.success) {
                window.location.href = '/login';
              } else {
                showError(data.error?.message || 'Registration failed');
                password.classList.add('border-red-500');
                btn.textContent = '가입하기';
                btn instanceof HTMLButtonElement && (btn.disabled = false);
              }
            } catch {
              showError('Network error');
              btn.textContent = '가입하기';
              btn instanceof HTMLButtonElement && (btn.disabled = false);
            }
          } else {
            showError('모든 항목을 입력하세요.');
            if (!f) firstName.classList.add('border-red-500');
            if (!l) lastName.classList.add('border-red-500');
            if (!p) password.classList.add('border-red-500');
          }
        }
      });

      [emailInput, firstName, lastName, password].forEach((el) => {
        el?.addEventListener('input', () => {
          el.classList.remove('border-red-500');
          clearError();
        });
      });
    });
  </script>
</Layout>
