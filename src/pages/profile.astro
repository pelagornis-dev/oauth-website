---
import Layout from '../layouts/Layout.astro';
import CardContainer from '@components/CardContainer.astro';
import AuthTitle from '@components/AuthTitle.astro';
import ProfileInfo from '@components/ProfileInfo.astro';
import AuthButton from '@components/AuthButton.astro';
---

<Layout>
  <CardContainer>
    <AuthTitle title="내 프로필" description="Pelagornis OAuth 계정 정보" />
    <div id="profile-status" class="text-gray-400 text-sm mb-4">불러오는 중...</div>
    <div id="profile-info" class="hidden">
      <!-- ProfileInfo는 JS에서 동적으로 렌더링 -->
    </div>
    <AuthButton id="logout-btn" text="로그아웃" className="mt-8" />
  </CardContainer>
  <script type="module">
    const token = localStorage.getItem('accessToken');
    const statusDiv = document.getElementById('profile-status');
    const infoDiv = document.getElementById('profile-info');
    const logoutBtn = document.getElementById('logout-btn');
    if (!token) {
      window.location.href = '/login';
    } else {
      fetch('http://localhost:3000/api/v1/users/me', {
        headers: { Authorization: `Bearer ${token}` },
      })
        .then((res) => res.json())
        .then((data) => {
          if (data.success) {
            if (statusDiv) statusDiv.classList.add('hidden');
            if (infoDiv) {
              infoDiv.classList.remove('hidden');
              infoDiv.innerHTML = '';
              const el = document.createElement('div');
              el.innerHTML = `<div>${data.data.user.email}</div>`; // 임시
              infoDiv.appendChild(el);
              // Astro 컴포넌트 동적 렌더링은 SSR이므로, 실제로는 서버에서 렌더링하거나, Svelte/Vue/React slot 활용 필요
              // 여기서는 예시로 infoDiv.innerHTML에 ProfileInfo와 동일한 구조를 직접 넣어도 됨
              infoDiv.innerHTML = `
                <div class='space-y-5'>
                  <div>
                    <div class='text-xs text-gray-400 mb-1'>이메일</div>
                    <div class='text-base text-black font-medium'>${data.data.user.email}</div>
                  </div>
                  <div>
                    <div class='text-xs text-gray-400 mb-1'>이름</div>
                    <div class='text-base text-black font-medium'>${data.data.user.firstName} ${data.data.user.lastName}</div>
                  </div>
                  <div>
                    <div class='text-xs text-gray-400 mb-1'>이메일 인증</div>
                    <span class='inline-block px-2 py-0.5 rounded-full text-xs font-semibold ${data.data.user.isEmailVerified ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-500'}'>
                      ${data.data.user.isEmailVerified ? '완료' : '미완료'}
                    </span>
                  </div>
                </div>
              `;
            }
          } else {
            if (statusDiv) {
              statusDiv.textContent = '사용자 정보를 불러올 수 없습니다.';
              statusDiv.className = 'text-red-500 text-sm mb-4';
            }
          }
        })
        .catch(() => {
          if (statusDiv) {
            statusDiv.textContent = '네트워크 오류가 발생했습니다.';
            statusDiv.className = 'text-red-500 text-sm mb-4';
          }
        });
    }
    logoutBtn?.addEventListener('click', () => {
      localStorage.removeItem('accessToken');
      window.location.href = '/login';
    });
  </script>
</Layout>
